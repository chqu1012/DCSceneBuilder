/**
 */
package de.dc.javafx.mm.provider;

import de.dc.javafx.mm.util.MmAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITableItemLabelProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class MmItemProviderAdapterFactory extends MmAdapterFactory
		implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public MmItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
		supportedTypes.add(ITableItemLabelProvider.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.javafx.mm.EmfModel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EmfModelItemProvider emfModelItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.javafx.mm.EmfModel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEmfModelAdapter() {
		if (emfModelItemProvider == null) {
			emfModelItemProvider = new EmfModelItemProvider(this);
		}

		return emfModelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.javafx.mm.EBean} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EBeanItemProvider eBeanItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.javafx.mm.EBean}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEBeanAdapter() {
		if (eBeanItemProvider == null) {
			eBeanItemProvider = new EBeanItemProvider(this);
		}

		return eBeanItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.javafx.mm.EField} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EFieldItemProvider eFieldItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.javafx.mm.EField}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEFieldAdapter() {
		if (eFieldItemProvider == null) {
			eFieldItemProvider = new EFieldItemProvider(this);
		}

		return eFieldItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.javafx.mm.EBindingModel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EBindingModelItemProvider eBindingModelItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.javafx.mm.EBindingModel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEBindingModelAdapter() {
		if (eBindingModelItemProvider == null) {
			eBindingModelItemProvider = new EBindingModelItemProvider(this);
		}

		return eBindingModelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.javafx.mm.EBinding} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EBindingItemProvider eBindingItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.javafx.mm.EBinding}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEBindingAdapter() {
		if (eBindingItemProvider == null) {
			eBindingItemProvider = new EBindingItemProvider(this);
		}

		return eBindingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.javafx.mm.EEvents} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EEventsItemProvider eEventsItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.javafx.mm.EEvents}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEEventsAdapter() {
		if (eEventsItemProvider == null) {
			eEventsItemProvider = new EEventsItemProvider(this);
		}

		return eEventsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.javafx.mm.Styleable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StyleableItemProvider styleableItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.javafx.mm.Styleable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStyleableAdapter() {
		if (styleableItemProvider == null) {
			styleableItemProvider = new StyleableItemProvider(this);
		}

		return styleableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.javafx.mm.Skinnable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SkinnableItemProvider skinnableItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.javafx.mm.Skinnable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSkinnableAdapter() {
		if (skinnableItemProvider == null) {
			skinnableItemProvider = new SkinnableItemProvider(this);
		}

		return skinnableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.javafx.mm.EInsets} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EInsetsItemProvider eInsetsItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.javafx.mm.EInsets}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEInsetsAdapter() {
		if (eInsetsItemProvider == null) {
			eInsetsItemProvider = new EInsetsItemProvider(this);
		}

		return eInsetsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.javafx.mm.EGroup} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EGroupItemProvider eGroupItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.javafx.mm.EGroup}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEGroupAdapter() {
		if (eGroupItemProvider == null) {
			eGroupItemProvider = new EGroupItemProvider(this);
		}

		return eGroupItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.javafx.mm.EWebView} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EWebViewItemProvider eWebViewItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.javafx.mm.EWebView}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEWebViewAdapter() {
		if (eWebViewItemProvider == null) {
			eWebViewItemProvider = new EWebViewItemProvider(this);
		}

		return eWebViewItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.javafx.mm.ETabPane} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ETabPaneItemProvider eTabPaneItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.javafx.mm.ETabPane}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createETabPaneAdapter() {
		if (eTabPaneItemProvider == null) {
			eTabPaneItemProvider = new ETabPaneItemProvider(this);
		}

		return eTabPaneItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.javafx.mm.ETab} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ETabItemProvider eTabItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.javafx.mm.ETab}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createETabAdapter() {
		if (eTabItemProvider == null) {
			eTabItemProvider = new ETabItemProvider(this);
		}

		return eTabItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.javafx.mm.EBorderData} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EBorderDataItemProvider eBorderDataItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.javafx.mm.EBorderData}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEBorderDataAdapter() {
		if (eBorderDataItemProvider == null) {
			eBorderDataItemProvider = new EBorderDataItemProvider(this);
		}

		return eBorderDataItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.javafx.mm.EVBoxData} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EVBoxDataItemProvider evBoxDataItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.javafx.mm.EVBoxData}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEVBoxDataAdapter() {
		if (evBoxDataItemProvider == null) {
			evBoxDataItemProvider = new EVBoxDataItemProvider(this);
		}

		return evBoxDataItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.javafx.mm.EHBoxData} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EHBoxDataItemProvider ehBoxDataItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.javafx.mm.EHBoxData}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEHBoxDataAdapter() {
		if (ehBoxDataItemProvider == null) {
			ehBoxDataItemProvider = new EHBoxDataItemProvider(this);
		}

		return ehBoxDataItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.javafx.mm.EAreaChart} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EAreaChartItemProvider eAreaChartItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.javafx.mm.EAreaChart}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEAreaChartAdapter() {
		if (eAreaChartItemProvider == null) {
			eAreaChartItemProvider = new EAreaChartItemProvider(this);
		}

		return eAreaChartItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.javafx.mm.EBarChart} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EBarChartItemProvider eBarChartItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.javafx.mm.EBarChart}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEBarChartAdapter() {
		if (eBarChartItemProvider == null) {
			eBarChartItemProvider = new EBarChartItemProvider(this);
		}

		return eBarChartItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.javafx.mm.EBubbleChart} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EBubbleChartItemProvider eBubbleChartItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.javafx.mm.EBubbleChart}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEBubbleChartAdapter() {
		if (eBubbleChartItemProvider == null) {
			eBubbleChartItemProvider = new EBubbleChartItemProvider(this);
		}

		return eBubbleChartItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.javafx.mm.ELineChart} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ELineChartItemProvider eLineChartItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.javafx.mm.ELineChart}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createELineChartAdapter() {
		if (eLineChartItemProvider == null) {
			eLineChartItemProvider = new ELineChartItemProvider(this);
		}

		return eLineChartItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.javafx.mm.EScatterChart} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EScatterChartItemProvider eScatterChartItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.javafx.mm.EScatterChart}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEScatterChartAdapter() {
		if (eScatterChartItemProvider == null) {
			eScatterChartItemProvider = new EScatterChartItemProvider(this);
		}

		return eScatterChartItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.javafx.mm.EStackedAreaChart} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EStackedAreaChartItemProvider eStackedAreaChartItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.javafx.mm.EStackedAreaChart}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEStackedAreaChartAdapter() {
		if (eStackedAreaChartItemProvider == null) {
			eStackedAreaChartItemProvider = new EStackedAreaChartItemProvider(this);
		}

		return eStackedAreaChartItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.javafx.mm.EStackedBarChart} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EStackedBarChartItemProvider eStackedBarChartItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.javafx.mm.EStackedBarChart}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEStackedBarChartAdapter() {
		if (eStackedBarChartItemProvider == null) {
			eStackedBarChartItemProvider = new EStackedBarChartItemProvider(this);
		}

		return eStackedBarChartItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.javafx.mm.EText} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ETextItemProvider eTextItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.javafx.mm.EText}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createETextAdapter() {
		if (eTextItemProvider == null) {
			eTextItemProvider = new ETextItemProvider(this);
		}

		return eTextItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.javafx.mm.ELabel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ELabelItemProvider eLabelItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.javafx.mm.ELabel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createELabelAdapter() {
		if (eLabelItemProvider == null) {
			eLabelItemProvider = new ELabelItemProvider(this);
		}

		return eLabelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.javafx.mm.EButton} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EButtonItemProvider eButtonItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.javafx.mm.EButton}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEButtonAdapter() {
		if (eButtonItemProvider == null) {
			eButtonItemProvider = new EButtonItemProvider(this);
		}

		return eButtonItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.javafx.mm.ECheckBox} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ECheckBoxItemProvider eCheckBoxItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.javafx.mm.ECheckBox}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createECheckBoxAdapter() {
		if (eCheckBoxItemProvider == null) {
			eCheckBoxItemProvider = new ECheckBoxItemProvider(this);
		}

		return eCheckBoxItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.javafx.mm.EHyperlink} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EHyperlinkItemProvider eHyperlinkItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.javafx.mm.EHyperlink}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEHyperlinkAdapter() {
		if (eHyperlinkItemProvider == null) {
			eHyperlinkItemProvider = new EHyperlinkItemProvider(this);
		}

		return eHyperlinkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.javafx.mm.EMenuButton} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EMenuButtonItemProvider eMenuButtonItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.javafx.mm.EMenuButton}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEMenuButtonAdapter() {
		if (eMenuButtonItemProvider == null) {
			eMenuButtonItemProvider = new EMenuButtonItemProvider(this);
		}

		return eMenuButtonItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.javafx.mm.ESplitMenuButton} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ESplitMenuButtonItemProvider eSplitMenuButtonItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.javafx.mm.ESplitMenuButton}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createESplitMenuButtonAdapter() {
		if (eSplitMenuButtonItemProvider == null) {
			eSplitMenuButtonItemProvider = new ESplitMenuButtonItemProvider(this);
		}

		return eSplitMenuButtonItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.javafx.mm.EToogleButton} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EToogleButtonItemProvider eToogleButtonItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.javafx.mm.EToogleButton}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEToogleButtonAdapter() {
		if (eToogleButtonItemProvider == null) {
			eToogleButtonItemProvider = new EToogleButtonItemProvider(this);
		}

		return eToogleButtonItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.javafx.mm.EFilteredTableView} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EFilteredTableViewItemProvider eFilteredTableViewItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.javafx.mm.EFilteredTableView}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEFilteredTableViewAdapter() {
		if (eFilteredTableViewItemProvider == null) {
			eFilteredTableViewItemProvider = new EFilteredTableViewItemProvider(this);
		}

		return eFilteredTableViewItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.javafx.mm.ETableView} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ETableViewItemProvider eTableViewItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.javafx.mm.ETableView}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createETableViewAdapter() {
		if (eTableViewItemProvider == null) {
			eTableViewItemProvider = new ETableViewItemProvider(this);
		}

		return eTableViewItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.javafx.mm.ETableColumn} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ETableColumnItemProvider eTableColumnItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.javafx.mm.ETableColumn}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createETableColumnAdapter() {
		if (eTableColumnItemProvider == null) {
			eTableColumnItemProvider = new ETableColumnItemProvider(this);
		}

		return eTableColumnItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.javafx.mm.EListView} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EListViewItemProvider eListViewItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.javafx.mm.EListView}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEListViewAdapter() {
		if (eListViewItemProvider == null) {
			eListViewItemProvider = new EListViewItemProvider(this);
		}

		return eListViewItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.javafx.mm.ERadioButton} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ERadioButtonItemProvider eRadioButtonItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.javafx.mm.ERadioButton}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createERadioButtonAdapter() {
		if (eRadioButtonItemProvider == null) {
			eRadioButtonItemProvider = new ERadioButtonItemProvider(this);
		}

		return eRadioButtonItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.javafx.mm.ECatgeoryAxis} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ECatgeoryAxisItemProvider eCatgeoryAxisItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.javafx.mm.ECatgeoryAxis}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createECatgeoryAxisAdapter() {
		if (eCatgeoryAxisItemProvider == null) {
			eCatgeoryAxisItemProvider = new ECatgeoryAxisItemProvider(this);
		}

		return eCatgeoryAxisItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.javafx.mm.EValueAxis} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EValueAxisItemProvider eValueAxisItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.javafx.mm.EValueAxis}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEValueAxisAdapter() {
		if (eValueAxisItemProvider == null) {
			eValueAxisItemProvider = new EValueAxisItemProvider(this);
		}

		return eValueAxisItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.javafx.mm.EPieChart} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EPieChartItemProvider ePieChartItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.javafx.mm.EPieChart}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEPieChartAdapter() {
		if (ePieChartItemProvider == null) {
			ePieChartItemProvider = new EPieChartItemProvider(this);
		}

		return ePieChartItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.javafx.mm.EXYChart} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EXYChartItemProvider exyChartItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.javafx.mm.EXYChart}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEXYChartAdapter() {
		if (exyChartItemProvider == null) {
			exyChartItemProvider = new EXYChartItemProvider(this);
		}

		return exyChartItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.javafx.mm.EPane} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EPaneItemProvider ePaneItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.javafx.mm.EPane}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEPaneAdapter() {
		if (ePaneItemProvider == null) {
			ePaneItemProvider = new EPaneItemProvider(this);
		}

		return ePaneItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.javafx.mm.EStackPane} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EStackPaneItemProvider eStackPaneItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.javafx.mm.EStackPane}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEStackPaneAdapter() {
		if (eStackPaneItemProvider == null) {
			eStackPaneItemProvider = new EStackPaneItemProvider(this);
		}

		return eStackPaneItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.javafx.mm.EDialogPane} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EDialogPaneItemProvider eDialogPaneItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.javafx.mm.EDialogPane}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEDialogPaneAdapter() {
		if (eDialogPaneItemProvider == null) {
			eDialogPaneItemProvider = new EDialogPaneItemProvider(this);
		}

		return eDialogPaneItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.javafx.mm.EGridPane} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EGridPaneItemProvider eGridPaneItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.javafx.mm.EGridPane}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEGridPaneAdapter() {
		if (eGridPaneItemProvider == null) {
			eGridPaneItemProvider = new EGridPaneItemProvider(this);
		}

		return eGridPaneItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.javafx.mm.EHBox} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EHBoxItemProvider ehBoxItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.javafx.mm.EHBox}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEHBoxAdapter() {
		if (ehBoxItemProvider == null) {
			ehBoxItemProvider = new EHBoxItemProvider(this);
		}

		return ehBoxItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.javafx.mm.EVBox} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EVBoxItemProvider evBoxItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.javafx.mm.EVBox}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEVBoxAdapter() {
		if (evBoxItemProvider == null) {
			evBoxItemProvider = new EVBoxItemProvider(this);
		}

		return evBoxItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.javafx.mm.EFlowPane} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EFlowPaneItemProvider eFlowPaneItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.javafx.mm.EFlowPane}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEFlowPaneAdapter() {
		if (eFlowPaneItemProvider == null) {
			eFlowPaneItemProvider = new EFlowPaneItemProvider(this);
		}

		return eFlowPaneItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.javafx.mm.ESplitPane} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ESplitPaneItemProvider eSplitPaneItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.javafx.mm.ESplitPane}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createESplitPaneAdapter() {
		if (eSplitPaneItemProvider == null) {
			eSplitPaneItemProvider = new ESplitPaneItemProvider(this);
		}

		return eSplitPaneItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.javafx.mm.ETilePane} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ETilePaneItemProvider eTilePaneItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.javafx.mm.ETilePane}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createETilePaneAdapter() {
		if (eTilePaneItemProvider == null) {
			eTilePaneItemProvider = new ETilePaneItemProvider(this);
		}

		return eTilePaneItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.javafx.mm.EAnchorPane} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EAnchorPaneItemProvider eAnchorPaneItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.javafx.mm.EAnchorPane}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEAnchorPaneAdapter() {
		if (eAnchorPaneItemProvider == null) {
			eAnchorPaneItemProvider = new EAnchorPaneItemProvider(this);
		}

		return eAnchorPaneItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.javafx.mm.EBorderPane} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EBorderPaneItemProvider eBorderPaneItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.javafx.mm.EBorderPane}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEBorderPaneAdapter() {
		if (eBorderPaneItemProvider == null) {
			eBorderPaneItemProvider = new EBorderPaneItemProvider(this);
		}

		return eBorderPaneItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.javafx.mm.EImageView} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EImageViewItemProvider eImageViewItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.javafx.mm.EImageView}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEImageViewAdapter() {
		if (eImageViewItemProvider == null) {
			eImageViewItemProvider = new EImageViewItemProvider(this);
		}

		return eImageViewItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.javafx.mm.EScrollPane} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EScrollPaneItemProvider eScrollPaneItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.javafx.mm.EScrollPane}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEScrollPaneAdapter() {
		if (eScrollPaneItemProvider == null) {
			eScrollPaneItemProvider = new EScrollPaneItemProvider(this);
		}

		return eScrollPaneItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void dispose() {
		if (emfModelItemProvider != null)
			emfModelItemProvider.dispose();
		if (eBeanItemProvider != null)
			eBeanItemProvider.dispose();
		if (eFieldItemProvider != null)
			eFieldItemProvider.dispose();
		if (eBindingModelItemProvider != null)
			eBindingModelItemProvider.dispose();
		if (eBindingItemProvider != null)
			eBindingItemProvider.dispose();
		if (styleableItemProvider != null)
			styleableItemProvider.dispose();
		if (skinnableItemProvider != null)
			skinnableItemProvider.dispose();
		if (eInsetsItemProvider != null)
			eInsetsItemProvider.dispose();
		if (eGroupItemProvider != null)
			eGroupItemProvider.dispose();
		if (eTextItemProvider != null)
			eTextItemProvider.dispose();
		if (eLabelItemProvider != null)
			eLabelItemProvider.dispose();
		if (eButtonItemProvider != null)
			eButtonItemProvider.dispose();
		if (eCheckBoxItemProvider != null)
			eCheckBoxItemProvider.dispose();
		if (eHyperlinkItemProvider != null)
			eHyperlinkItemProvider.dispose();
		if (eMenuButtonItemProvider != null)
			eMenuButtonItemProvider.dispose();
		if (eSplitMenuButtonItemProvider != null)
			eSplitMenuButtonItemProvider.dispose();
		if (eToogleButtonItemProvider != null)
			eToogleButtonItemProvider.dispose();
		if (eFilteredTableViewItemProvider != null)
			eFilteredTableViewItemProvider.dispose();
		if (eTableViewItemProvider != null)
			eTableViewItemProvider.dispose();
		if (eTableColumnItemProvider != null)
			eTableColumnItemProvider.dispose();
		if (eListViewItemProvider != null)
			eListViewItemProvider.dispose();
		if (eRadioButtonItemProvider != null)
			eRadioButtonItemProvider.dispose();
		if (eCatgeoryAxisItemProvider != null)
			eCatgeoryAxisItemProvider.dispose();
		if (eValueAxisItemProvider != null)
			eValueAxisItemProvider.dispose();
		if (ePieChartItemProvider != null)
			ePieChartItemProvider.dispose();
		if (exyChartItemProvider != null)
			exyChartItemProvider.dispose();
		if (ePaneItemProvider != null)
			ePaneItemProvider.dispose();
		if (eStackPaneItemProvider != null)
			eStackPaneItemProvider.dispose();
		if (eDialogPaneItemProvider != null)
			eDialogPaneItemProvider.dispose();
		if (eGridPaneItemProvider != null)
			eGridPaneItemProvider.dispose();
		if (ehBoxItemProvider != null)
			ehBoxItemProvider.dispose();
		if (evBoxItemProvider != null)
			evBoxItemProvider.dispose();
		if (eFlowPaneItemProvider != null)
			eFlowPaneItemProvider.dispose();
		if (eSplitPaneItemProvider != null)
			eSplitPaneItemProvider.dispose();
		if (eTilePaneItemProvider != null)
			eTilePaneItemProvider.dispose();
		if (eAnchorPaneItemProvider != null)
			eAnchorPaneItemProvider.dispose();
		if (eBorderPaneItemProvider != null)
			eBorderPaneItemProvider.dispose();
		if (eImageViewItemProvider != null)
			eImageViewItemProvider.dispose();
		if (eScrollPaneItemProvider != null)
			eScrollPaneItemProvider.dispose();
		if (eEventsItemProvider != null)
			eEventsItemProvider.dispose();
		if (eWebViewItemProvider != null)
			eWebViewItemProvider.dispose();
		if (eTabPaneItemProvider != null)
			eTabPaneItemProvider.dispose();
		if (eTabItemProvider != null)
			eTabItemProvider.dispose();
		if (eBorderDataItemProvider != null)
			eBorderDataItemProvider.dispose();
		if (evBoxDataItemProvider != null)
			evBoxDataItemProvider.dispose();
		if (ehBoxDataItemProvider != null)
			ehBoxDataItemProvider.dispose();
		if (eAreaChartItemProvider != null)
			eAreaChartItemProvider.dispose();
		if (eBarChartItemProvider != null)
			eBarChartItemProvider.dispose();
		if (eBubbleChartItemProvider != null)
			eBubbleChartItemProvider.dispose();
		if (eLineChartItemProvider != null)
			eLineChartItemProvider.dispose();
		if (eScatterChartItemProvider != null)
			eScatterChartItemProvider.dispose();
		if (eStackedAreaChartItemProvider != null)
			eStackedAreaChartItemProvider.dispose();
		if (eStackedBarChartItemProvider != null)
			eStackedBarChartItemProvider.dispose();
	}

}
