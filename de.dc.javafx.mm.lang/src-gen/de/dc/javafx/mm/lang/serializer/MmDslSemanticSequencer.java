/*
 * generated by Xtext 2.17.0
 */
package de.dc.javafx.mm.lang.serializer;

import com.google.inject.Inject;
import de.dc.javafx.mm.EAnchorPane;
import de.dc.javafx.mm.EBorderPane;
import de.dc.javafx.mm.EButton;
import de.dc.javafx.mm.ECatgeoryAxis;
import de.dc.javafx.mm.ECheckBox;
import de.dc.javafx.mm.EDialogPane;
import de.dc.javafx.mm.EFlowPane;
import de.dc.javafx.mm.EGridPane;
import de.dc.javafx.mm.EGroup;
import de.dc.javafx.mm.EHBox;
import de.dc.javafx.mm.EHyperlink;
import de.dc.javafx.mm.EInsets;
import de.dc.javafx.mm.ELabel;
import de.dc.javafx.mm.EMenuButton;
import de.dc.javafx.mm.EPane;
import de.dc.javafx.mm.EPieChart;
import de.dc.javafx.mm.ERadioButton;
import de.dc.javafx.mm.ESplitMenuButton;
import de.dc.javafx.mm.EStackPane;
import de.dc.javafx.mm.ETableColumn;
import de.dc.javafx.mm.ETableView;
import de.dc.javafx.mm.EText;
import de.dc.javafx.mm.ETilePane;
import de.dc.javafx.mm.EToogleButton;
import de.dc.javafx.mm.EVBox;
import de.dc.javafx.mm.EValueAxis;
import de.dc.javafx.mm.EWebView;
import de.dc.javafx.mm.EXYChart;
import de.dc.javafx.mm.EmfModel;
import de.dc.javafx.mm.MmPackage;
import de.dc.javafx.mm.lang.services.MmDslGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.common.types.JvmFormalParameter;
import org.eclipse.xtext.common.types.JvmGenericArrayTypeReference;
import org.eclipse.xtext.common.types.JvmInnerTypeReference;
import org.eclipse.xtext.common.types.JvmLowerBound;
import org.eclipse.xtext.common.types.JvmParameterizedTypeReference;
import org.eclipse.xtext.common.types.JvmTypeParameter;
import org.eclipse.xtext.common.types.JvmUpperBound;
import org.eclipse.xtext.common.types.JvmWildcardTypeReference;
import org.eclipse.xtext.common.types.TypesPackage;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.xbase.XAssignment;
import org.eclipse.xtext.xbase.XBasicForLoopExpression;
import org.eclipse.xtext.xbase.XBinaryOperation;
import org.eclipse.xtext.xbase.XBlockExpression;
import org.eclipse.xtext.xbase.XBooleanLiteral;
import org.eclipse.xtext.xbase.XCasePart;
import org.eclipse.xtext.xbase.XCastedExpression;
import org.eclipse.xtext.xbase.XCatchClause;
import org.eclipse.xtext.xbase.XClosure;
import org.eclipse.xtext.xbase.XConstructorCall;
import org.eclipse.xtext.xbase.XDoWhileExpression;
import org.eclipse.xtext.xbase.XFeatureCall;
import org.eclipse.xtext.xbase.XForLoopExpression;
import org.eclipse.xtext.xbase.XIfExpression;
import org.eclipse.xtext.xbase.XInstanceOfExpression;
import org.eclipse.xtext.xbase.XListLiteral;
import org.eclipse.xtext.xbase.XMemberFeatureCall;
import org.eclipse.xtext.xbase.XNullLiteral;
import org.eclipse.xtext.xbase.XNumberLiteral;
import org.eclipse.xtext.xbase.XPostfixOperation;
import org.eclipse.xtext.xbase.XReturnExpression;
import org.eclipse.xtext.xbase.XSetLiteral;
import org.eclipse.xtext.xbase.XStringLiteral;
import org.eclipse.xtext.xbase.XSwitchExpression;
import org.eclipse.xtext.xbase.XSynchronizedExpression;
import org.eclipse.xtext.xbase.XThrowExpression;
import org.eclipse.xtext.xbase.XTryCatchFinallyExpression;
import org.eclipse.xtext.xbase.XTypeLiteral;
import org.eclipse.xtext.xbase.XUnaryOperation;
import org.eclipse.xtext.xbase.XVariableDeclaration;
import org.eclipse.xtext.xbase.XWhileExpression;
import org.eclipse.xtext.xbase.XbasePackage;
import org.eclipse.xtext.xbase.serializer.XbaseSemanticSequencer;
import org.eclipse.xtext.xtype.XFunctionTypeRef;
import org.eclipse.xtext.xtype.XImportDeclaration;
import org.eclipse.xtext.xtype.XImportSection;
import org.eclipse.xtext.xtype.XtypePackage;

@SuppressWarnings("all")
public class MmDslSemanticSequencer extends XbaseSemanticSequencer {

	@Inject
	private MmDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == MmPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MmPackage.EANCHOR_PANE:
				sequence_EAnchorPane(context, (EAnchorPane) semanticObject); 
				return; 
			case MmPackage.EBORDER_PANE:
				sequence_EBorderPane(context, (EBorderPane) semanticObject); 
				return; 
			case MmPackage.EBUTTON:
				sequence_EButton(context, (EButton) semanticObject); 
				return; 
			case MmPackage.ECATGEORY_AXIS:
				sequence_ECatgeoryAxis(context, (ECatgeoryAxis) semanticObject); 
				return; 
			case MmPackage.ECHECK_BOX:
				sequence_ECheckBox(context, (ECheckBox) semanticObject); 
				return; 
			case MmPackage.EDIALOG_PANE:
				sequence_EDialogPane(context, (EDialogPane) semanticObject); 
				return; 
			case MmPackage.EFLOW_PANE:
				sequence_EFlowPane(context, (EFlowPane) semanticObject); 
				return; 
			case MmPackage.EGRID_PANE:
				sequence_EGridPane(context, (EGridPane) semanticObject); 
				return; 
			case MmPackage.EGROUP:
				sequence_EGroup(context, (EGroup) semanticObject); 
				return; 
			case MmPackage.EH_BOX:
				sequence_EHBox(context, (EHBox) semanticObject); 
				return; 
			case MmPackage.EHYPERLINK:
				sequence_EHyperlink(context, (EHyperlink) semanticObject); 
				return; 
			case MmPackage.EINSETS:
				sequence_EInsets(context, (EInsets) semanticObject); 
				return; 
			case MmPackage.ELABEL:
				sequence_ELabel(context, (ELabel) semanticObject); 
				return; 
			case MmPackage.EMENU_BUTTON:
				sequence_EMenuButton(context, (EMenuButton) semanticObject); 
				return; 
			case MmPackage.EPANE:
				sequence_EPane_Impl(context, (EPane) semanticObject); 
				return; 
			case MmPackage.EPIE_CHART:
				sequence_EPieChart(context, (EPieChart) semanticObject); 
				return; 
			case MmPackage.ERADIO_BUTTON:
				sequence_ERadioButton(context, (ERadioButton) semanticObject); 
				return; 
			case MmPackage.ESPLIT_MENU_BUTTON:
				sequence_ESplitMenuButton(context, (ESplitMenuButton) semanticObject); 
				return; 
			case MmPackage.ESTACK_PANE:
				sequence_EStackPane(context, (EStackPane) semanticObject); 
				return; 
			case MmPackage.ETABLE_COLUMN:
				sequence_ETableColumn(context, (ETableColumn) semanticObject); 
				return; 
			case MmPackage.ETABLE_VIEW:
				sequence_ETableView(context, (ETableView) semanticObject); 
				return; 
			case MmPackage.ETEXT:
				sequence_EText(context, (EText) semanticObject); 
				return; 
			case MmPackage.ETILE_PANE:
				sequence_ETilePane(context, (ETilePane) semanticObject); 
				return; 
			case MmPackage.ETOOGLE_BUTTON:
				sequence_EToogleButton_Impl(context, (EToogleButton) semanticObject); 
				return; 
			case MmPackage.EV_BOX:
				sequence_EVBox(context, (EVBox) semanticObject); 
				return; 
			case MmPackage.EVALUE_AXIS:
				sequence_EValueAxis(context, (EValueAxis) semanticObject); 
				return; 
			case MmPackage.EWEB_VIEW:
				sequence_EWebView(context, (EWebView) semanticObject); 
				return; 
			case MmPackage.EXY_CHART:
				sequence_EXYChart(context, (EXYChart) semanticObject); 
				return; 
			case MmPackage.EMF_MODEL:
				sequence_EmfModel(context, (EmfModel) semanticObject); 
				return; 
			}
		else if (epackage == TypesPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case TypesPackage.JVM_FORMAL_PARAMETER:
				if (rule == grammarAccess.getFullJvmFormalParameterRule()) {
					sequence_FullJvmFormalParameter(context, (JvmFormalParameter) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getJvmFormalParameterRule()) {
					sequence_JvmFormalParameter(context, (JvmFormalParameter) semanticObject); 
					return; 
				}
				else break;
			case TypesPackage.JVM_GENERIC_ARRAY_TYPE_REFERENCE:
				sequence_JvmTypeReference(context, (JvmGenericArrayTypeReference) semanticObject); 
				return; 
			case TypesPackage.JVM_INNER_TYPE_REFERENCE:
				sequence_JvmParameterizedTypeReference(context, (JvmInnerTypeReference) semanticObject); 
				return; 
			case TypesPackage.JVM_LOWER_BOUND:
				if (rule == grammarAccess.getJvmLowerBoundAndedRule()) {
					sequence_JvmLowerBoundAnded(context, (JvmLowerBound) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getJvmLowerBoundRule()) {
					sequence_JvmLowerBound(context, (JvmLowerBound) semanticObject); 
					return; 
				}
				else break;
			case TypesPackage.JVM_PARAMETERIZED_TYPE_REFERENCE:
				if (action == grammarAccess.getJvmParameterizedTypeReferenceAccess().getJvmInnerTypeReferenceOuterAction_1_4_0_0_0()) {
					sequence_JvmParameterizedTypeReference_JvmInnerTypeReference_1_4_0_0_0(context, (JvmParameterizedTypeReference) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getJvmTypeReferenceRule()
						|| action == grammarAccess.getJvmTypeReferenceAccess().getJvmGenericArrayTypeReferenceComponentTypeAction_0_1_0_0()
						|| rule == grammarAccess.getJvmParameterizedTypeReferenceRule()
						|| rule == grammarAccess.getJvmArgumentTypeReferenceRule()) {
					sequence_JvmParameterizedTypeReference(context, (JvmParameterizedTypeReference) semanticObject); 
					return; 
				}
				else break;
			case TypesPackage.JVM_TYPE_PARAMETER:
				sequence_JvmTypeParameter(context, (JvmTypeParameter) semanticObject); 
				return; 
			case TypesPackage.JVM_UPPER_BOUND:
				if (rule == grammarAccess.getJvmUpperBoundAndedRule()) {
					sequence_JvmUpperBoundAnded(context, (JvmUpperBound) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getJvmUpperBoundRule()) {
					sequence_JvmUpperBound(context, (JvmUpperBound) semanticObject); 
					return; 
				}
				else break;
			case TypesPackage.JVM_WILDCARD_TYPE_REFERENCE:
				sequence_JvmWildcardTypeReference(context, (JvmWildcardTypeReference) semanticObject); 
				return; 
			}
		else if (epackage == XbasePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case XbasePackage.XASSIGNMENT:
				sequence_XAssignment_XMemberFeatureCall(context, (XAssignment) semanticObject); 
				return; 
			case XbasePackage.XBASIC_FOR_LOOP_EXPRESSION:
				sequence_XBasicForLoopExpression(context, (XBasicForLoopExpression) semanticObject); 
				return; 
			case XbasePackage.XBINARY_OPERATION:
				sequence_XAdditiveExpression_XAndExpression_XAssignment_XEqualityExpression_XMultiplicativeExpression_XOrExpression_XOtherOperatorExpression_XRelationalExpression(context, (XBinaryOperation) semanticObject); 
				return; 
			case XbasePackage.XBLOCK_EXPRESSION:
				if (rule == grammarAccess.getXExpressionRule()
						|| rule == grammarAccess.getXAssignmentRule()
						|| action == grammarAccess.getXAssignmentAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0()
						|| rule == grammarAccess.getXOrExpressionRule()
						|| action == grammarAccess.getXOrExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXAndExpressionRule()
						|| action == grammarAccess.getXAndExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXEqualityExpressionRule()
						|| action == grammarAccess.getXEqualityExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXRelationalExpressionRule()
						|| action == grammarAccess.getXRelationalExpressionAccess().getXInstanceOfExpressionExpressionAction_1_0_0_0_0()
						|| action == grammarAccess.getXRelationalExpressionAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0()
						|| rule == grammarAccess.getXOtherOperatorExpressionRule()
						|| action == grammarAccess.getXOtherOperatorExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXAdditiveExpressionRule()
						|| action == grammarAccess.getXAdditiveExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXMultiplicativeExpressionRule()
						|| action == grammarAccess.getXMultiplicativeExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXUnaryOperationRule()
						|| rule == grammarAccess.getXCastedExpressionRule()
						|| action == grammarAccess.getXCastedExpressionAccess().getXCastedExpressionTargetAction_1_0_0_0()
						|| rule == grammarAccess.getXPostfixOperationRule()
						|| action == grammarAccess.getXPostfixOperationAccess().getXPostfixOperationOperandAction_1_0_0()
						|| rule == grammarAccess.getXMemberFeatureCallRule()
						|| action == grammarAccess.getXMemberFeatureCallAccess().getXAssignmentAssignableAction_1_0_0_0_0()
						|| action == grammarAccess.getXMemberFeatureCallAccess().getXMemberFeatureCallMemberCallTargetAction_1_1_0_0_0()
						|| rule == grammarAccess.getXPrimaryExpressionRule()
						|| rule == grammarAccess.getXParenthesizedExpressionRule()
						|| rule == grammarAccess.getXBlockExpressionRule()
						|| rule == grammarAccess.getXExpressionOrVarDeclarationRule()) {
					sequence_XBlockExpression(context, (XBlockExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getXExpressionInClosureRule()) {
					sequence_XExpressionInClosure(context, (XBlockExpression) semanticObject); 
					return; 
				}
				else break;
			case XbasePackage.XBOOLEAN_LITERAL:
				sequence_XBooleanLiteral(context, (XBooleanLiteral) semanticObject); 
				return; 
			case XbasePackage.XCASE_PART:
				sequence_XCasePart(context, (XCasePart) semanticObject); 
				return; 
			case XbasePackage.XCASTED_EXPRESSION:
				sequence_XCastedExpression(context, (XCastedExpression) semanticObject); 
				return; 
			case XbasePackage.XCATCH_CLAUSE:
				sequence_XCatchClause(context, (XCatchClause) semanticObject); 
				return; 
			case XbasePackage.XCLOSURE:
				if (rule == grammarAccess.getXExpressionRule()
						|| rule == grammarAccess.getXAssignmentRule()
						|| action == grammarAccess.getXAssignmentAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0()
						|| rule == grammarAccess.getXOrExpressionRule()
						|| action == grammarAccess.getXOrExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXAndExpressionRule()
						|| action == grammarAccess.getXAndExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXEqualityExpressionRule()
						|| action == grammarAccess.getXEqualityExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXRelationalExpressionRule()
						|| action == grammarAccess.getXRelationalExpressionAccess().getXInstanceOfExpressionExpressionAction_1_0_0_0_0()
						|| action == grammarAccess.getXRelationalExpressionAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0()
						|| rule == grammarAccess.getXOtherOperatorExpressionRule()
						|| action == grammarAccess.getXOtherOperatorExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXAdditiveExpressionRule()
						|| action == grammarAccess.getXAdditiveExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXMultiplicativeExpressionRule()
						|| action == grammarAccess.getXMultiplicativeExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXUnaryOperationRule()
						|| rule == grammarAccess.getXCastedExpressionRule()
						|| action == grammarAccess.getXCastedExpressionAccess().getXCastedExpressionTargetAction_1_0_0_0()
						|| rule == grammarAccess.getXPostfixOperationRule()
						|| action == grammarAccess.getXPostfixOperationAccess().getXPostfixOperationOperandAction_1_0_0()
						|| rule == grammarAccess.getXMemberFeatureCallRule()
						|| action == grammarAccess.getXMemberFeatureCallAccess().getXAssignmentAssignableAction_1_0_0_0_0()
						|| action == grammarAccess.getXMemberFeatureCallAccess().getXMemberFeatureCallMemberCallTargetAction_1_1_0_0_0()
						|| rule == grammarAccess.getXPrimaryExpressionRule()
						|| rule == grammarAccess.getXLiteralRule()
						|| rule == grammarAccess.getXClosureRule()
						|| rule == grammarAccess.getXParenthesizedExpressionRule()
						|| rule == grammarAccess.getXExpressionOrVarDeclarationRule()) {
					sequence_XClosure(context, (XClosure) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getXShortClosureRule()) {
					sequence_XShortClosure(context, (XClosure) semanticObject); 
					return; 
				}
				else break;
			case XbasePackage.XCONSTRUCTOR_CALL:
				sequence_XConstructorCall(context, (XConstructorCall) semanticObject); 
				return; 
			case XbasePackage.XDO_WHILE_EXPRESSION:
				sequence_XDoWhileExpression(context, (XDoWhileExpression) semanticObject); 
				return; 
			case XbasePackage.XFEATURE_CALL:
				sequence_XFeatureCall(context, (XFeatureCall) semanticObject); 
				return; 
			case XbasePackage.XFOR_LOOP_EXPRESSION:
				sequence_XForLoopExpression(context, (XForLoopExpression) semanticObject); 
				return; 
			case XbasePackage.XIF_EXPRESSION:
				sequence_XIfExpression(context, (XIfExpression) semanticObject); 
				return; 
			case XbasePackage.XINSTANCE_OF_EXPRESSION:
				sequence_XRelationalExpression(context, (XInstanceOfExpression) semanticObject); 
				return; 
			case XbasePackage.XLIST_LITERAL:
				sequence_XListLiteral(context, (XListLiteral) semanticObject); 
				return; 
			case XbasePackage.XMEMBER_FEATURE_CALL:
				sequence_XMemberFeatureCall(context, (XMemberFeatureCall) semanticObject); 
				return; 
			case XbasePackage.XNULL_LITERAL:
				sequence_XNullLiteral(context, (XNullLiteral) semanticObject); 
				return; 
			case XbasePackage.XNUMBER_LITERAL:
				sequence_XNumberLiteral(context, (XNumberLiteral) semanticObject); 
				return; 
			case XbasePackage.XPOSTFIX_OPERATION:
				sequence_XPostfixOperation(context, (XPostfixOperation) semanticObject); 
				return; 
			case XbasePackage.XRETURN_EXPRESSION:
				sequence_XReturnExpression(context, (XReturnExpression) semanticObject); 
				return; 
			case XbasePackage.XSET_LITERAL:
				sequence_XSetLiteral(context, (XSetLiteral) semanticObject); 
				return; 
			case XbasePackage.XSTRING_LITERAL:
				sequence_XStringLiteral(context, (XStringLiteral) semanticObject); 
				return; 
			case XbasePackage.XSWITCH_EXPRESSION:
				sequence_XSwitchExpression(context, (XSwitchExpression) semanticObject); 
				return; 
			case XbasePackage.XSYNCHRONIZED_EXPRESSION:
				sequence_XSynchronizedExpression(context, (XSynchronizedExpression) semanticObject); 
				return; 
			case XbasePackage.XTHROW_EXPRESSION:
				sequence_XThrowExpression(context, (XThrowExpression) semanticObject); 
				return; 
			case XbasePackage.XTRY_CATCH_FINALLY_EXPRESSION:
				sequence_XTryCatchFinallyExpression(context, (XTryCatchFinallyExpression) semanticObject); 
				return; 
			case XbasePackage.XTYPE_LITERAL:
				sequence_XTypeLiteral(context, (XTypeLiteral) semanticObject); 
				return; 
			case XbasePackage.XUNARY_OPERATION:
				sequence_XUnaryOperation(context, (XUnaryOperation) semanticObject); 
				return; 
			case XbasePackage.XVARIABLE_DECLARATION:
				sequence_XVariableDeclaration(context, (XVariableDeclaration) semanticObject); 
				return; 
			case XbasePackage.XWHILE_EXPRESSION:
				sequence_XWhileExpression(context, (XWhileExpression) semanticObject); 
				return; 
			}
		else if (epackage == XtypePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case XtypePackage.XFUNCTION_TYPE_REF:
				sequence_XFunctionTypeRef(context, (XFunctionTypeRef) semanticObject); 
				return; 
			case XtypePackage.XIMPORT_DECLARATION:
				sequence_XImportDeclaration(context, (XImportDeclaration) semanticObject); 
				return; 
			case XtypePackage.XIMPORT_SECTION:
				sequence_XImportSection(context, (XImportSection) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     ENode returns EAnchorPane
	 *     EAnchorPane returns EAnchorPane
	 *
	 * Constraint:
	 *     (
	 *         visible?='visible'? 
	 *         disable?='disable'? 
	 *         onAction=EString? 
	 *         id=EString? 
	 *         layoutX=EDouble? 
	 *         layoutY=EDouble? 
	 *         opacity=EDouble? 
	 *         style=EString? 
	 *         (styleClass+=EString styleClass+=EString*)? 
	 *         maxHeight=EDouble? 
	 *         minHeight=EDouble? 
	 *         prefHeight=EDouble? 
	 *         maxWidth=EDouble? 
	 *         minWidth=EDouble? 
	 *         prefWidth=EDouble? 
	 *         pos=EPos? 
	 *         margin=EInsets? 
	 *         (children+=ENode children+=ENode*)? 
	 *         padding=EInsets?
	 *     )
	 */
	protected void sequence_EAnchorPane(ISerializationContext context, EAnchorPane semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ENode returns EBorderPane
	 *     EBorderPane returns EBorderPane
	 *
	 * Constraint:
	 *     (
	 *         visible?='visible'? 
	 *         disable?='disable'? 
	 *         onAction=EString? 
	 *         id=EString? 
	 *         layoutX=EDouble? 
	 *         layoutY=EDouble? 
	 *         opacity=EDouble? 
	 *         style=EString? 
	 *         (styleClass+=EString styleClass+=EString*)? 
	 *         maxHeight=EDouble? 
	 *         minHeight=EDouble? 
	 *         prefHeight=EDouble? 
	 *         maxWidth=EDouble? 
	 *         minWidth=EDouble? 
	 *         prefWidth=EDouble? 
	 *         pos=EPos? 
	 *         margin=EInsets? 
	 *         (children+=ENode children+=ENode*)? 
	 *         padding=EInsets? 
	 *         left=ENode? 
	 *         right=ENode? 
	 *         top=ENode? 
	 *         bottom=ENode? 
	 *         center=ENode?
	 *     )
	 */
	protected void sequence_EBorderPane(ISerializationContext context, EBorderPane semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ENode returns EButton
	 *     EButton returns EButton
	 *
	 * Constraint:
	 *     (
	 *         visible?='visible'? 
	 *         disable?='disable'? 
	 *         onAction=EString? 
	 *         id=EString? 
	 *         layoutX=EDouble? 
	 *         layoutY=EDouble? 
	 *         opacity=EDouble? 
	 *         style=EString? 
	 *         (styleClass+=EString styleClass+=EString*)? 
	 *         maxHeight=EDouble? 
	 *         minHeight=EDouble? 
	 *         prefHeight=EDouble? 
	 *         maxWidth=EDouble? 
	 *         minWidth=EDouble? 
	 *         prefWidth=EDouble? 
	 *         text=EString? 
	 *         margin=EInsets? 
	 *         (children+=ENode children+=ENode*)? 
	 *         padding=EInsets?
	 *     )
	 */
	protected void sequence_EButton(ISerializationContext context, EButton semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ENode returns ECatgeoryAxis
	 *     ECatgeoryAxis returns ECatgeoryAxis
	 *
	 * Constraint:
	 *     (
	 *         visible?='visible'? 
	 *         disable?='disable'? 
	 *         onAction=EString? 
	 *         id=EString? 
	 *         layoutX=EDouble? 
	 *         layoutY=EDouble? 
	 *         opacity=EDouble? 
	 *         style=EString? 
	 *         (styleClass+=EString styleClass+=EString*)? 
	 *         maxHeight=EDouble? 
	 *         minHeight=EDouble? 
	 *         prefHeight=EDouble? 
	 *         maxWidth=EDouble? 
	 *         minWidth=EDouble? 
	 *         prefWidth=EDouble? 
	 *         margin=EInsets? 
	 *         (children+=ENode children+=ENode*)? 
	 *         padding=EInsets?
	 *     )
	 */
	protected void sequence_ECatgeoryAxis(ISerializationContext context, ECatgeoryAxis semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ENode returns ECheckBox
	 *     ECheckBox returns ECheckBox
	 *
	 * Constraint:
	 *     (
	 *         visible?='visible'? 
	 *         disable?='disable'? 
	 *         selected?='selected'? 
	 *         onAction=EString? 
	 *         id=EString? 
	 *         layoutX=EDouble? 
	 *         layoutY=EDouble? 
	 *         opacity=EDouble? 
	 *         style=EString? 
	 *         (styleClass+=EString styleClass+=EString*)? 
	 *         maxHeight=EDouble? 
	 *         minHeight=EDouble? 
	 *         prefHeight=EDouble? 
	 *         maxWidth=EDouble? 
	 *         minWidth=EDouble? 
	 *         prefWidth=EDouble? 
	 *         text=EString? 
	 *         margin=EInsets? 
	 *         (children+=ENode children+=ENode*)? 
	 *         padding=EInsets?
	 *     )
	 */
	protected void sequence_ECheckBox(ISerializationContext context, ECheckBox semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ENode returns EDialogPane
	 *     EDialogPane returns EDialogPane
	 *
	 * Constraint:
	 *     (
	 *         visible?='visible'? 
	 *         disable?='disable'? 
	 *         onAction=EString? 
	 *         id=EString? 
	 *         layoutX=EDouble? 
	 *         layoutY=EDouble? 
	 *         opacity=EDouble? 
	 *         style=EString? 
	 *         (styleClass+=EString styleClass+=EString*)? 
	 *         maxHeight=EDouble? 
	 *         minHeight=EDouble? 
	 *         prefHeight=EDouble? 
	 *         maxWidth=EDouble? 
	 *         minWidth=EDouble? 
	 *         prefWidth=EDouble? 
	 *         pos=EPos? 
	 *         header=EString? 
	 *         headerText=EString? 
	 *         contentText=EString? 
	 *         margin=EInsets? 
	 *         (children+=ENode children+=ENode*)? 
	 *         padding=EInsets? 
	 *         content=ENode?
	 *     )
	 */
	protected void sequence_EDialogPane(ISerializationContext context, EDialogPane semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ENode returns EFlowPane
	 *     EFlowPane returns EFlowPane
	 *
	 * Constraint:
	 *     (
	 *         visible?='visible'? 
	 *         disable?='disable'? 
	 *         onAction=EString? 
	 *         id=EString? 
	 *         layoutX=EDouble? 
	 *         layoutY=EDouble? 
	 *         opacity=EDouble? 
	 *         style=EString? 
	 *         (styleClass+=EString styleClass+=EString*)? 
	 *         maxHeight=EDouble? 
	 *         minHeight=EDouble? 
	 *         prefHeight=EDouble? 
	 *         maxWidth=EDouble? 
	 *         minWidth=EDouble? 
	 *         prefWidth=EDouble? 
	 *         pos=EPos? 
	 *         margin=EInsets? 
	 *         (children+=ENode children+=ENode*)? 
	 *         padding=EInsets?
	 *     )
	 */
	protected void sequence_EFlowPane(ISerializationContext context, EFlowPane semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ENode returns EGridPane
	 *     EGridPane returns EGridPane
	 *
	 * Constraint:
	 *     (
	 *         visible?='visible'? 
	 *         disable?='disable'? 
	 *         onAction=EString? 
	 *         id=EString? 
	 *         layoutX=EDouble? 
	 *         layoutY=EDouble? 
	 *         opacity=EDouble? 
	 *         style=EString? 
	 *         (styleClass+=EString styleClass+=EString*)? 
	 *         maxHeight=EDouble? 
	 *         minHeight=EDouble? 
	 *         prefHeight=EDouble? 
	 *         maxWidth=EDouble? 
	 *         minWidth=EDouble? 
	 *         prefWidth=EDouble? 
	 *         pos=EPos? 
	 *         margin=EInsets? 
	 *         (children+=ENode children+=ENode*)? 
	 *         padding=EInsets?
	 *     )
	 */
	protected void sequence_EGridPane(ISerializationContext context, EGridPane semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ENode returns EGroup
	 *     EGroup returns EGroup
	 *
	 * Constraint:
	 *     (
	 *         visible?='visible'? 
	 *         disable?='disable'? 
	 *         onAction=EString? 
	 *         id=EString? 
	 *         layoutX=EDouble? 
	 *         layoutY=EDouble? 
	 *         opacity=EDouble? 
	 *         style=EString? 
	 *         (styleClass+=EString styleClass+=EString*)? 
	 *         maxHeight=EDouble? 
	 *         minHeight=EDouble? 
	 *         prefHeight=EDouble? 
	 *         maxWidth=EDouble? 
	 *         minWidth=EDouble? 
	 *         prefWidth=EDouble? 
	 *         margin=EInsets?
	 *     )
	 */
	protected void sequence_EGroup(ISerializationContext context, EGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ENode returns EHBox
	 *     EHBox returns EHBox
	 *
	 * Constraint:
	 *     (
	 *         visible?='visible'? 
	 *         disable?='disable'? 
	 *         onAction=EString? 
	 *         id=EString? 
	 *         layoutX=EDouble? 
	 *         layoutY=EDouble? 
	 *         opacity=EDouble? 
	 *         style=EString? 
	 *         (styleClass+=EString styleClass+=EString*)? 
	 *         maxHeight=EDouble? 
	 *         minHeight=EDouble? 
	 *         prefHeight=EDouble? 
	 *         maxWidth=EDouble? 
	 *         minWidth=EDouble? 
	 *         prefWidth=EDouble? 
	 *         pos=EPos? 
	 *         spacing=EDouble? 
	 *         margin=EInsets? 
	 *         (children+=ENode children+=ENode*)? 
	 *         padding=EInsets?
	 *     )
	 */
	protected void sequence_EHBox(ISerializationContext context, EHBox semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ENode returns EHyperlink
	 *     EHyperlink returns EHyperlink
	 *
	 * Constraint:
	 *     (
	 *         visible?='visible'? 
	 *         disable?='disable'? 
	 *         visited?='visited'? 
	 *         onAction=EString? 
	 *         id=EString? 
	 *         layoutX=EDouble? 
	 *         layoutY=EDouble? 
	 *         opacity=EDouble? 
	 *         style=EString? 
	 *         (styleClass+=EString styleClass+=EString*)? 
	 *         maxHeight=EDouble? 
	 *         minHeight=EDouble? 
	 *         prefHeight=EDouble? 
	 *         maxWidth=EDouble? 
	 *         minWidth=EDouble? 
	 *         prefWidth=EDouble? 
	 *         text=EString? 
	 *         margin=EInsets? 
	 *         (children+=ENode children+=ENode*)? 
	 *         padding=EInsets?
	 *     )
	 */
	protected void sequence_EHyperlink(ISerializationContext context, EHyperlink semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EInsets returns EInsets
	 *
	 * Constraint:
	 *     (top=EDouble? bottom=EDouble? right=EDouble? left=EDouble?)
	 */
	protected void sequence_EInsets(ISerializationContext context, EInsets semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ENode returns ELabel
	 *     ELabel returns ELabel
	 *
	 * Constraint:
	 *     (
	 *         visible?='visible'? 
	 *         disable?='disable'? 
	 *         onAction=EString? 
	 *         id=EString? 
	 *         layoutX=EDouble? 
	 *         layoutY=EDouble? 
	 *         opacity=EDouble? 
	 *         style=EString? 
	 *         (styleClass+=EString styleClass+=EString*)? 
	 *         maxHeight=EDouble? 
	 *         minHeight=EDouble? 
	 *         prefHeight=EDouble? 
	 *         maxWidth=EDouble? 
	 *         minWidth=EDouble? 
	 *         prefWidth=EDouble? 
	 *         text=EString? 
	 *         margin=EInsets? 
	 *         (children+=ENode children+=ENode*)? 
	 *         padding=EInsets?
	 *     )
	 */
	protected void sequence_ELabel(ISerializationContext context, ELabel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ENode returns EMenuButton
	 *     EMenuButton returns EMenuButton
	 *
	 * Constraint:
	 *     (
	 *         visible?='visible'? 
	 *         disable?='disable'? 
	 *         onAction=EString? 
	 *         id=EString? 
	 *         layoutX=EDouble? 
	 *         layoutY=EDouble? 
	 *         opacity=EDouble? 
	 *         style=EString? 
	 *         (styleClass+=EString styleClass+=EString*)? 
	 *         maxHeight=EDouble? 
	 *         minHeight=EDouble? 
	 *         prefHeight=EDouble? 
	 *         maxWidth=EDouble? 
	 *         minWidth=EDouble? 
	 *         prefWidth=EDouble? 
	 *         text=EString? 
	 *         margin=EInsets? 
	 *         (children+=ENode children+=ENode*)? 
	 *         padding=EInsets?
	 *     )
	 */
	protected void sequence_EMenuButton(ISerializationContext context, EMenuButton semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ENode returns EPane
	 *     EPane_Impl returns EPane
	 *
	 * Constraint:
	 *     (
	 *         visible?='visible'? 
	 *         disable?='disable'? 
	 *         onAction=EString? 
	 *         id=EString? 
	 *         layoutX=EDouble? 
	 *         layoutY=EDouble? 
	 *         opacity=EDouble? 
	 *         style=EString? 
	 *         (styleClass+=EString styleClass+=EString*)? 
	 *         maxHeight=EDouble? 
	 *         minHeight=EDouble? 
	 *         prefHeight=EDouble? 
	 *         maxWidth=EDouble? 
	 *         minWidth=EDouble? 
	 *         prefWidth=EDouble? 
	 *         pos=EPos? 
	 *         margin=EInsets? 
	 *         (children+=ENode children+=ENode*)? 
	 *         padding=EInsets?
	 *     )
	 */
	protected void sequence_EPane_Impl(ISerializationContext context, EPane semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ENode returns EPieChart
	 *     EPieChart returns EPieChart
	 *
	 * Constraint:
	 *     (
	 *         visible?='visible'? 
	 *         disable?='disable'? 
	 *         onAction=EString? 
	 *         id=EString? 
	 *         layoutX=EDouble? 
	 *         layoutY=EDouble? 
	 *         opacity=EDouble? 
	 *         style=EString? 
	 *         (styleClass+=EString styleClass+=EString*)? 
	 *         maxHeight=EDouble? 
	 *         minHeight=EDouble? 
	 *         prefHeight=EDouble? 
	 *         maxWidth=EDouble? 
	 *         minWidth=EDouble? 
	 *         prefWidth=EDouble? 
	 *         margin=EInsets? 
	 *         (children+=ENode children+=ENode*)? 
	 *         padding=EInsets?
	 *     )
	 */
	protected void sequence_EPieChart(ISerializationContext context, EPieChart semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ENode returns ERadioButton
	 *     ERadioButton returns ERadioButton
	 *
	 * Constraint:
	 *     (
	 *         visible?='visible'? 
	 *         disable?='disable'? 
	 *         selected?='selected'? 
	 *         onAction=EString? 
	 *         id=EString? 
	 *         layoutX=EDouble? 
	 *         layoutY=EDouble? 
	 *         opacity=EDouble? 
	 *         style=EString? 
	 *         (styleClass+=EString styleClass+=EString*)? 
	 *         maxHeight=EDouble? 
	 *         minHeight=EDouble? 
	 *         prefHeight=EDouble? 
	 *         maxWidth=EDouble? 
	 *         minWidth=EDouble? 
	 *         prefWidth=EDouble? 
	 *         text=EString? 
	 *         margin=EInsets? 
	 *         (children+=ENode children+=ENode*)? 
	 *         padding=EInsets?
	 *     )
	 */
	protected void sequence_ERadioButton(ISerializationContext context, ERadioButton semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ENode returns ESplitMenuButton
	 *     ESplitMenuButton returns ESplitMenuButton
	 *
	 * Constraint:
	 *     (
	 *         visible?='visible'? 
	 *         disable?='disable'? 
	 *         onAction=EString? 
	 *         id=EString? 
	 *         layoutX=EDouble? 
	 *         layoutY=EDouble? 
	 *         opacity=EDouble? 
	 *         style=EString? 
	 *         (styleClass+=EString styleClass+=EString*)? 
	 *         maxHeight=EDouble? 
	 *         minHeight=EDouble? 
	 *         prefHeight=EDouble? 
	 *         maxWidth=EDouble? 
	 *         minWidth=EDouble? 
	 *         prefWidth=EDouble? 
	 *         text=EString? 
	 *         margin=EInsets? 
	 *         (children+=ENode children+=ENode*)? 
	 *         padding=EInsets?
	 *     )
	 */
	protected void sequence_ESplitMenuButton(ISerializationContext context, ESplitMenuButton semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ENode returns EStackPane
	 *     EStackPane returns EStackPane
	 *
	 * Constraint:
	 *     (
	 *         visible?='visible'? 
	 *         disable?='disable'? 
	 *         onAction=EString? 
	 *         id=EString? 
	 *         layoutX=EDouble? 
	 *         layoutY=EDouble? 
	 *         opacity=EDouble? 
	 *         style=EString? 
	 *         (styleClass+=EString styleClass+=EString*)? 
	 *         maxHeight=EDouble? 
	 *         minHeight=EDouble? 
	 *         prefHeight=EDouble? 
	 *         maxWidth=EDouble? 
	 *         minWidth=EDouble? 
	 *         prefWidth=EDouble? 
	 *         pos=EPos? 
	 *         margin=EInsets? 
	 *         (children+=ENode children+=ENode*)? 
	 *         padding=EInsets?
	 *     )
	 */
	protected void sequence_EStackPane(ISerializationContext context, EStackPane semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ETableColumn returns ETableColumn
	 *
	 * Constraint:
	 *     (name=EString id=EString? width=EDouble? cellValueFactory=EString? cellFactory=EString?)
	 */
	protected void sequence_ETableColumn(ISerializationContext context, ETableColumn semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ENode returns ETableView
	 *     ETableView returns ETableView
	 *
	 * Constraint:
	 *     (
	 *         visible?='visible'? 
	 *         disable?='disable'? 
	 *         onAction=EString? 
	 *         id=EString? 
	 *         layoutX=EDouble? 
	 *         layoutY=EDouble? 
	 *         opacity=EDouble? 
	 *         style=EString? 
	 *         (styleClass+=EString styleClass+=EString*)? 
	 *         maxHeight=EDouble? 
	 *         minHeight=EDouble? 
	 *         prefHeight=EDouble? 
	 *         maxWidth=EDouble? 
	 *         minWidth=EDouble? 
	 *         prefWidth=EDouble? 
	 *         margin=EInsets? 
	 *         (children+=ENode children+=ENode*)? 
	 *         padding=EInsets? 
	 *         (columns+=ETableColumn columns+=ETableColumn*)?
	 *     )
	 */
	protected void sequence_ETableView(ISerializationContext context, ETableView semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ENode returns EText
	 *     EText returns EText
	 *
	 * Constraint:
	 *     (
	 *         visible?='visible'? 
	 *         disable?='disable'? 
	 *         onAction=EString? 
	 *         id=EString? 
	 *         layoutX=EDouble? 
	 *         layoutY=EDouble? 
	 *         opacity=EDouble? 
	 *         style=EString? 
	 *         (styleClass+=EString styleClass+=EString*)? 
	 *         maxHeight=EDouble? 
	 *         minHeight=EDouble? 
	 *         prefHeight=EDouble? 
	 *         maxWidth=EDouble? 
	 *         minWidth=EDouble? 
	 *         prefWidth=EDouble? 
	 *         text=EString? 
	 *         promtText=EString? 
	 *         margin=EInsets? 
	 *         (children+=ENode children+=ENode*)? 
	 *         padding=EInsets?
	 *     )
	 */
	protected void sequence_EText(ISerializationContext context, EText semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ENode returns ETilePane
	 *     ETilePane returns ETilePane
	 *
	 * Constraint:
	 *     (
	 *         visible?='visible'? 
	 *         disable?='disable'? 
	 *         onAction=EString? 
	 *         id=EString? 
	 *         layoutX=EDouble? 
	 *         layoutY=EDouble? 
	 *         opacity=EDouble? 
	 *         style=EString? 
	 *         (styleClass+=EString styleClass+=EString*)? 
	 *         maxHeight=EDouble? 
	 *         minHeight=EDouble? 
	 *         prefHeight=EDouble? 
	 *         maxWidth=EDouble? 
	 *         minWidth=EDouble? 
	 *         prefWidth=EDouble? 
	 *         pos=EPos? 
	 *         margin=EInsets? 
	 *         (children+=ENode children+=ENode*)? 
	 *         padding=EInsets?
	 *     )
	 */
	protected void sequence_ETilePane(ISerializationContext context, ETilePane semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ENode returns EToogleButton
	 *     EToogleButton_Impl returns EToogleButton
	 *
	 * Constraint:
	 *     (
	 *         visible?='visible'? 
	 *         disable?='disable'? 
	 *         selected?='selected'? 
	 *         onAction=EString? 
	 *         id=EString? 
	 *         layoutX=EDouble? 
	 *         layoutY=EDouble? 
	 *         opacity=EDouble? 
	 *         style=EString? 
	 *         (styleClass+=EString styleClass+=EString*)? 
	 *         maxHeight=EDouble? 
	 *         minHeight=EDouble? 
	 *         prefHeight=EDouble? 
	 *         maxWidth=EDouble? 
	 *         minWidth=EDouble? 
	 *         prefWidth=EDouble? 
	 *         text=EString? 
	 *         margin=EInsets? 
	 *         (children+=ENode children+=ENode*)? 
	 *         padding=EInsets?
	 *     )
	 */
	protected void sequence_EToogleButton_Impl(ISerializationContext context, EToogleButton semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ENode returns EVBox
	 *     EVBox returns EVBox
	 *
	 * Constraint:
	 *     (
	 *         visible?='visible'? 
	 *         disable?='disable'? 
	 *         onAction=EString? 
	 *         id=EString? 
	 *         layoutX=EDouble? 
	 *         layoutY=EDouble? 
	 *         opacity=EDouble? 
	 *         style=EString? 
	 *         (styleClass+=EString styleClass+=EString*)? 
	 *         maxHeight=EDouble? 
	 *         minHeight=EDouble? 
	 *         prefHeight=EDouble? 
	 *         maxWidth=EDouble? 
	 *         minWidth=EDouble? 
	 *         prefWidth=EDouble? 
	 *         pos=EPos? 
	 *         spacing=EDouble? 
	 *         margin=EInsets? 
	 *         (children+=ENode children+=ENode*)? 
	 *         padding=EInsets?
	 *     )
	 */
	protected void sequence_EVBox(ISerializationContext context, EVBox semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ENode returns EValueAxis
	 *     EValueAxis returns EValueAxis
	 *
	 * Constraint:
	 *     (
	 *         visible?='visible'? 
	 *         disable?='disable'? 
	 *         onAction=EString? 
	 *         id=EString? 
	 *         layoutX=EDouble? 
	 *         layoutY=EDouble? 
	 *         opacity=EDouble? 
	 *         style=EString? 
	 *         (styleClass+=EString styleClass+=EString*)? 
	 *         maxHeight=EDouble? 
	 *         minHeight=EDouble? 
	 *         prefHeight=EDouble? 
	 *         maxWidth=EDouble? 
	 *         minWidth=EDouble? 
	 *         prefWidth=EDouble? 
	 *         margin=EInsets? 
	 *         (children+=ENode children+=ENode*)? 
	 *         padding=EInsets?
	 *     )
	 */
	protected void sequence_EValueAxis(ISerializationContext context, EValueAxis semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ENode returns EWebView
	 *     EWebView returns EWebView
	 *
	 * Constraint:
	 *     (
	 *         visible?='visible'? 
	 *         disable?='disable'? 
	 *         onAction=EString? 
	 *         id=EString? 
	 *         layoutX=EDouble? 
	 *         layoutY=EDouble? 
	 *         opacity=EDouble? 
	 *         style=EString? 
	 *         (styleClass+=EString styleClass+=EString*)? 
	 *         maxHeight=EDouble? 
	 *         minHeight=EDouble? 
	 *         prefHeight=EDouble? 
	 *         maxWidth=EDouble? 
	 *         minWidth=EDouble? 
	 *         prefWidth=EDouble? 
	 *         margin=EInsets?
	 *     )
	 */
	protected void sequence_EWebView(ISerializationContext context, EWebView semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ENode returns EXYChart
	 *     EXYChart returns EXYChart
	 *
	 * Constraint:
	 *     (
	 *         visible?='visible'? 
	 *         disable?='disable'? 
	 *         onAction=EString? 
	 *         id=EString? 
	 *         layoutX=EDouble? 
	 *         layoutY=EDouble? 
	 *         opacity=EDouble? 
	 *         style=EString? 
	 *         (styleClass+=EString styleClass+=EString*)? 
	 *         maxHeight=EDouble? 
	 *         minHeight=EDouble? 
	 *         prefHeight=EDouble? 
	 *         maxWidth=EDouble? 
	 *         minWidth=EDouble? 
	 *         prefWidth=EDouble? 
	 *         margin=EInsets? 
	 *         (children+=ENode children+=ENode*)? 
	 *         padding=EInsets?
	 *     )
	 */
	protected void sequence_EXYChart(ISerializationContext context, EXYChart semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EmfModel returns EmfModel
	 *
	 * Constraint:
	 *     (basePackage=EString? name=EString? controller=EString? (styleClass+=EString styleClass+=EString*)? root=ENode?)
	 */
	protected void sequence_EmfModel(ISerializationContext context, EmfModel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
